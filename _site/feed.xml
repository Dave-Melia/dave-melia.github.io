<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-04-30T05:55:45+01:00</updated><id>http://localhost:4000/</id><title type="html">Dave Melia</title><subtitle>The sound of the rain needs no translation.</subtitle><entry><title type="html">Day 10</title><link href="http://localhost:4000/day-009/" rel="alternate" type="text/html" title="Day 10" /><published>2018-04-29T00:00:00+01:00</published><updated>2018-04-29T00:00:00+01:00</updated><id>http://localhost:4000/day-009</id><content type="html" xml:base="http://localhost:4000/day-009/">&lt;h2 id=&quot;todays-progress&quot;&gt;Today’s Progress&lt;/h2&gt;
&lt;p&gt;I have learned more about promises and I have rewritten the weather app using promises instead of callbacks.  I also began learning about Express and have set up a very basic web server with a few routes.&lt;/p&gt;

&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;At first I was a little confused in regards to promises, and to some extent I still am.  After going over a tutorial which explains them in depth, and also how to chain them together, I understand them a little more.  I got to rewrite the weather app using &lt;a href=&quot;https://www.npmjs.com/package/axios&quot;&gt;Axios&lt;/a&gt; instead of &lt;a href=&quot;https://www.npmjs.com/package/request&quot;&gt;Request&lt;/a&gt; since &lt;a href=&quot;https://www.npmjs.com/package/axios&quot;&gt;Axios&lt;/a&gt; supports promises, and it took less code to write than the original app did.&lt;/p&gt;

&lt;p&gt;As for Express, I have used it before but I didn’t understand it from the ground up and I never understood the difference between Node and Express.  Having spent some time with Node, and now moving on to Express, I feel like I understand them both as separate entities.&lt;/p&gt;

&lt;h2 id=&quot;useful-links&quot;&gt;Useful Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/axios&quot;&gt;Axios&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/request&quot;&gt;Request&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="100daysofcode" /><category term="node" /><category term="javascript" /><category term="promises" /><category term="express" /><summary type="html">Today’s Progress I have learned more about promises and I have rewritten the weather app using promises instead of callbacks. I also began learning about Express and have set up a very basic web server with a few routes.</summary></entry><entry><title type="html">Day 8</title><link href="http://localhost:4000/day-008/" rel="alternate" type="text/html" title="Day 8" /><published>2018-04-28T00:00:00+01:00</published><updated>2018-04-28T00:00:00+01:00</updated><id>http://localhost:4000/day-008</id><content type="html" xml:base="http://localhost:4000/day-008/">&lt;h2 id=&quot;todays-progress&quot;&gt;Today’s Progress&lt;/h2&gt;
&lt;p&gt;I have progressed further with the Node.JS weather app.  I even rebuilt it from scratch to reinforce what I had learned.&lt;/p&gt;

&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I was beginning to feel overwhelmed with what I had learned regarding Node.JS, and I felt like I wasn’t getting it and it wasn’t very enjoyable.  As per &lt;a href=&quot;https://twitter.com/RonJonBraun/status/989922649789861889&quot;&gt;@RonJonBraun’s tweet&lt;/a&gt; I decided to rewrite the weather app from scratch, without referring back to the code and without watching the tutorial for help.&lt;/p&gt;

&lt;p&gt;At first, I did feel like I was lost, and I’ll admit I did cheat by peeking at my previous code to figure out how to use the node &lt;a href=&quot;https://www.npmjs.com/package/request&quot;&gt;request&lt;/a&gt; package or how to set up the methods on the &lt;a href=&quot;https://www.npmjs.com/package/yargs&quot;&gt;yargs&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;I got the flow of things but when I got to calling geocodeAddress(), I recall not understanding how to use the callback() function.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;geocode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geocodeAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where the heck does errorMessage and results come from?
How does it differentiate between the two?&lt;/p&gt;

&lt;p&gt;The answer, as I discovered, was this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unable to connect to Google Servers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ZERO_RESULTS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unable to find that address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'OK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formatted_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lng&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thinking of the callback() arguments in the previous snippet, the first argument was ‘errorMessage’.  In this case, ‘errorMessage’ would be ‘Unable to connect to Google Servers’ or ‘Unable to find that address’, completely omitting the second argument.&lt;/p&gt;

&lt;p&gt;‘results’ would be, callback(‘undefined’, Object), declaring ‘errorMessage’ as undefined and passing in the address, longitude, and latitude into the second argument as an object.&lt;/p&gt;</content><author><name></name></author><category term="100daysofcode" /><category term="node" /><category term="javascript" /><category term="weatherapp" /><category term="callback" /><category term="snippets" /><summary type="html">Today’s Progress I have progressed further with the Node.JS weather app. I even rebuilt it from scratch to reinforce what I had learned.</summary></entry><entry><title type="html">Day 7</title><link href="http://localhost:4000/day-007/" rel="alternate" type="text/html" title="Day 7" /><published>2018-04-27T00:00:00+01:00</published><updated>2018-04-27T00:00:00+01:00</updated><id>http://localhost:4000/day-007</id><content type="html" xml:base="http://localhost:4000/day-007/">&lt;h2 id=&quot;todays-progress&quot;&gt;Today’s Progress&lt;/h2&gt;
&lt;p&gt;I have done some algorithm scripting on FreeCodeCamp.&lt;/p&gt;

&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Algorithm scripting isn’t very enjoyable, but I’d imagine it’s like having to eat your broccoli before you eat your dessert or having to limber up before going for a run… You want to get to the good stuff, but you need to do the boring stuff first.&lt;/p&gt;

&lt;p&gt;After a couple of hours attempting several algorithms, I realise I’m awful at solving them without having to Google for help (partly solutions).  I wonder if it’ll ‘click’ or if my brain just doesn’t function that way.&lt;/p&gt;

&lt;p&gt;I also need to spend time going over some regex as I have been avoiding it for years; even when I worked as a Linux Sysadmin I couldn’t conjure up the motivation to learn it.&lt;/p&gt;

&lt;h2 id=&quot;code-snippets&quot;&gt;Code Snippets&lt;/h2&gt;

&lt;h4 id=&quot;title-case-a-string-of-words&quot;&gt;Title Case A String of Words&lt;/h4&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toTitleCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\w\S&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;*/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;toTitleCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'heLLO, DAVE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// returns: Hello, Dave&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;helpful-links&quot;&gt;Helpful Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.w3schools.com/jsref/jsref_obj_regexp.asp&quot;&gt;Regex tutorial on W3Schools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt&quot;&gt;charAt()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr&quot;&gt;substr()&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="100daysofcode" /><category term="node" /><category term="javascript" /><category term="freecodecamp" /><category term="algorithms" /><category term="link" /><category term="links" /><category term="title case" /><category term="snippets" /><summary type="html">Today’s Progress I have done some algorithm scripting on FreeCodeCamp.</summary></entry><entry><title type="html">Day 6</title><link href="http://localhost:4000/day-006/" rel="alternate" type="text/html" title="Day 6" /><published>2018-04-26T00:00:00+01:00</published><updated>2018-04-26T00:00:00+01:00</updated><id>http://localhost:4000/day-006</id><content type="html" xml:base="http://localhost:4000/day-006/">&lt;h2 id=&quot;todays-progress&quot;&gt;Today’s Progress&lt;/h2&gt;
&lt;p&gt;Working more on HTTP requests whilst building the weather app.&lt;/p&gt;

&lt;p&gt;I have also learned about encodeURIComponent() as well as decodeURIComponent() which enable me to encode user input (in this case, the address), and replace spaces with %20.  The reverse happens for decodeURIComponent()!  See the links below.
I have also set in place some callback error handling.&lt;/p&gt;

&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;GitHub wasn’t logging my contributions for the past couple of days and I’ve only just realised it’s because the author email address on the commits were set to dave@macbook.local rather than my actual email address.  It’s a little disappointing because I was going to use the commits as part of my commitment to the challenge, but at least I’ve realised it early on in the challenge rather than towards the end!&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent&quot;&gt;encodeURIComponent&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="100daysofcode" /><category term="node" /><category term="javascript" /><category term="api" /><category term="github" /><category term="encodeuricomponent" /><category term="decodeuricomponent" /><category term="link" /><category term="links" /><summary type="html">Today’s Progress Working more on HTTP requests whilst building the weather app.</summary></entry><entry><title type="html">Day 5</title><link href="http://localhost:4000/day-005/" rel="alternate" type="text/html" title="Day 5" /><published>2018-04-25T00:00:00+01:00</published><updated>2018-04-25T00:00:00+01:00</updated><id>http://localhost:4000/day-005</id><content type="html" xml:base="http://localhost:4000/day-005/">&lt;h2 id=&quot;todays-progress&quot;&gt;Today’s Progress&lt;/h2&gt;
&lt;p&gt;I did a bit on HTTP requests, error, response, body etc.&lt;/p&gt;

&lt;p&gt;Also had to mess around with Jekyll to change some stuff with the blog.  Not had a great deal of time but I managed about 40 minutes.&lt;/p&gt;

&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;The baby has colic so I wasn’t able to do much this evening.  Luckily, I code during the wee small hours of the morning and I’ve got this evening to catch up.&lt;/p&gt;</content><author><name></name></author><category term="100daysofcode" /><category term="node" /><category term="javascript" /><summary type="html">Today’s Progress I did a bit on HTTP requests, error, response, body etc.</summary></entry><entry><title type="html">Day 4</title><link href="http://localhost:4000/day-004/" rel="alternate" type="text/html" title="Day 4" /><published>2018-04-24T00:00:00+01:00</published><updated>2018-04-24T00:00:00+01:00</updated><id>http://localhost:4000/day-004</id><content type="html" xml:base="http://localhost:4000/day-004/">&lt;h2 id=&quot;todays-progress&quot;&gt;Today’s Progress&lt;/h2&gt;
&lt;p&gt;I have spent some time learning the basics of async, call stack and event loop.&lt;/p&gt;

&lt;p&gt;I have started to make a weather app using the Google Maps API, and I have learned how to beautify JSON callbacks (see below).&lt;/p&gt;

&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h2&gt;

&lt;p&gt;async and call stack are quite intimidating at the moment and whilst it does make sense, I don’t think I understand it enough.  I’m really excited to progress with the weather app and use the Google Maps API.&lt;/p&gt;

&lt;h2 id=&quot;code-snippets&quot;&gt;Code Snippets&lt;/h2&gt;

&lt;h4 id=&quot;pretty-print-json-callbacks&quot;&gt;Pretty print JSON callbacks&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;This works by adding spaces (2 in this case) to the string&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://maps.googleapis.com/maps/api/geocode/json?address=1301%20lombard%20street%20philadelphia'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="100daysofcode" /><category term="node" /><category term="javascript" /><category term="async" /><category term="call stack" /><category term="event loop" /><category term="json" /><summary type="html">Today’s Progress I have spent some time learning the basics of async, call stack and event loop.</summary></entry><entry><title type="html">Day 3</title><link href="http://localhost:4000/day-003/" rel="alternate" type="text/html" title="Day 3" /><published>2018-04-23T00:00:00+01:00</published><updated>2018-04-23T00:00:00+01:00</updated><id>http://localhost:4000/day-003</id><content type="html" xml:base="http://localhost:4000/day-003/">&lt;h2 id=&quot;todays-progress&quot;&gt;Today’s Progress&lt;/h2&gt;
&lt;p&gt;I have refined my notes app and I have learned some of the methods of ‘yargs’.&lt;/p&gt;

&lt;p&gt;I have also managed to set up and configure this blog, however I had to set the post date of ‘New Blog!’ to the 20th to keep things in order.&lt;/p&gt;

&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h2&gt;

&lt;p&gt;I am finding node packages a little intimidating at the moment.  I am also failing to see how I’m supposed to know that a package exists.  For example, if I didn’t learn of the existence of yargs through a video I watched, how would I know about it and how would I know it’s something I needed?&lt;/p&gt;

&lt;p&gt;Time will tell, I presume!&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Link(s)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/yargs&quot;&gt;yargs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yargs/yargs/blob/HEAD/docs/api.md#commandcmd-desc-module&quot;&gt;yargs .command()&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="100daysofcode" /><category term="yargs" /><category term="node" /><summary type="html">Today’s Progress I have refined my notes app and I have learned some of the methods of ‘yargs’.</summary></entry><entry><title type="html">Day 2</title><link href="http://localhost:4000/day-002/" rel="alternate" type="text/html" title="Day 2" /><published>2018-04-22T00:00:00+01:00</published><updated>2018-04-22T00:00:00+01:00</updated><id>http://localhost:4000/day-002</id><content type="html" xml:base="http://localhost:4000/day-002/">&lt;h2 id=&quot;todays-progress&quot;&gt;Today’s Progress&lt;/h2&gt;
&lt;p&gt;Completed the NodeJS notes app.&lt;/p&gt;

&lt;p&gt;Functionality includes adding, removing, viewing and listing notes.&lt;/p&gt;

&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h2&gt;

&lt;p&gt;I have finished the NodeJS notes app and I have learned about using the NodeJS console and Chrome Dev Tools to debug the code.  Feeling accomplished, but it’s 4:31am and I am exhausted!&lt;/p&gt;</content><author><name></name></author><category term="100daysofcode" /><category term="node" /><summary type="html">Today’s Progress Completed the NodeJS notes app.</summary></entry><entry><title type="html">Day 1</title><link href="http://localhost:4000/day-001/" rel="alternate" type="text/html" title="Day 1" /><published>2018-04-21T00:00:00+01:00</published><updated>2018-04-21T00:00:00+01:00</updated><id>http://localhost:4000/day-001</id><content type="html" xml:base="http://localhost:4000/day-001/">&lt;h2 id=&quot;todays-progress&quot;&gt;Today’s Progress&lt;/h2&gt;
&lt;p&gt;I’m getting to grips with Node.JS&lt;/p&gt;

&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I am awful at UI Design but I love backend work, so I am taking an interest in Node.JS.  Currently going through some practical tutorials.&lt;/p&gt;</content><author><name></name></author><category term="100daysofcode" /><category term="node" /><summary type="html">Today’s Progress I’m getting to grips with Node.JS</summary></entry><entry><title type="html">New Blog!</title><link href="http://localhost:4000/new-blog/" rel="alternate" type="text/html" title="New Blog!" /><published>2018-04-20T00:00:00+01:00</published><updated>2018-04-20T00:00:00+01:00</updated><id>http://localhost:4000/new-blog</id><content type="html" xml:base="http://localhost:4000/new-blog/">&lt;p&gt;Hey!  Welcome to my new blog.  I have created this as a place to log my ‘&lt;a href=&quot;http://100daysofcode.com/&quot;&gt;#100daysofcode&lt;/a&gt; challenge’ progress, and to use as a point of reference for the stuff I’m likely to forget.&lt;/p&gt;</content><author><name></name></author><category term="new" /><category term="blog" /><summary type="html">Hey! Welcome to my new blog. I have created this as a place to log my ‘#100daysofcode challenge’ progress, and to use as a point of reference for the stuff I’m likely to forget.</summary></entry></feed>